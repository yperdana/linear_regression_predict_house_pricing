# -*- coding: utf-8 -*-
"""Simple Linear Regression - prices of houses in California

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BLjEdyADzVC5nvkJ_yASffxyOmiOCJaM

this project created to gain more exercise linear regression with real dataset. this project also part of Bangkit Academy. 

we try to learn and do modification. we try to predict something new such as corelation between median_house_value and median_income. 

Our team members: Yohanes, Eko, Yogic. 

source: https://colab.research.google.com/drive/1BLjEdyADzVC5nvkJ_yASffxyOmiOCJaM#scrollTo=YgyGafFJsQ25&line=4&uniqifier=1

Learning Objectives:
1. Play with Tensorflow
2. Import and Learn linear regression with real dataset.
3. find data corelation.
4. Make hypothesis
5. Learn to create model.
6. Experiment with dataset and features.
7. Tweaking hyperparameters.
8. Visualize the result.
"""

# Commented out IPython magic to ensure Python compatibility.
#@title Run on TensorFlow 2.x
# %tensorflow_version 2.x

# Import relevant libraries
import pandas as pd
import tensorflow as tf
from matplotlib import pyplot as plt

# SETTING UP PANDAS 
# The following lines adjust the granularity of reporting. 
pd.options.display.max_rows = 10
pd.options.display.float_format = "{:.1f}".format

"""Import and setting usually not hard but necessary and less error if we run in codelab. We use tensorflow version 2 for machine learning task. Numpy for math calculation, and pandas to store data in memory."""

# Import the dataset.
training_df = pd.read_csv(filepath_or_buffer="https://download.mlcc.google.com/mledu-datasets/california_housing_train.csv")

# Scale the label.
training_df["median_house_value"] /= 1000.0

# Print the first rows of the pandas DataFrame.
training_df.head()

"""Importing data set, scaling median_house_value and print some of data to check overal data."""

# Get statistics on the dataset.
training_df.describe()

#@title Define the functions that build and train a model
def build_model(my_learning_rate):
  """Create and compile a simple linear regression model."""
  # Most simple tf.keras models are sequential.
  model = tf.keras.models.Sequential()

  # Describe the topography of the model.
  # The topography of a simple linear regression model
  # is a single node in a single layer.
  model.add(tf.keras.layers.Dense(units=1, 
                                  input_shape=(1,)))

  # Compile the model topography into code that TensorFlow can efficiently
  # execute. Configure training to minimize the model's mean squared error. 
  model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=my_learning_rate),
                loss="mean_squared_error",
                metrics=[tf.keras.metrics.RootMeanSquaredError()])

  return model        


def train_model(model, df, feature, label, epochs, batch_size):
  """Train the model by feeding it data."""

  # Feed the model the feature and the label.
  # The model will train for the specified number of epochs. 
  history = model.fit(x=df[feature],
                      y=df[label],
                      batch_size=None,
                      epochs=epochs)

  # Gather the trained model's weight and bias.
  trained_weight = model.get_weights()[0]
  trained_bias = model.get_weights()[1]

  # The list of epochs is stored separately from the rest of history.
  epochs = history.epoch
  
  # Isolate the error for each epoch.
  hist = pd.DataFrame(history.history)

  # To track the progression of training, we're going to take a snapshot
  # of the model's root mean squared error at each epoch. 
  rmse = hist["root_mean_squared_error"]

  return trained_weight, trained_bias, epochs, rmse

print("Defined the create_model and traing_model functions.")

#@title Define the plotting functions
def plot_the_model(trained_weight, trained_bias, feature, label, largest_value):
  """Plot the trained model against 200 random training examples."""

  # Label the axes.
  plt.xlabel(feature)
  plt.ylabel(label)

  # Create a scatter plot from 200 random points of the dataset.
  random_examples = training_df.sample(n=200)
  plt.scatter(random_examples[feature], random_examples[label])

  # Create a red line representing the model. The red line starts
  # at coordinates (x0, y0) and ends at coordinates (x1, y1).
  x0 = 0
  y0 = trained_bias
  x1 = largest_value
  y1 = trained_bias + (trained_weight * x1)
  plt.plot([x0, x1], [y0, y1], c='r')

  # Render the scatter plot and the red line.
  plt.show()


def plot_the_loss_curve(epochs, rmse):
  """Plot a curve of loss vs. epoch."""

  plt.figure()
  plt.xlabel("Epoch")
  plt.ylabel("Root Mean Squared Error")

  plt.plot(epochs, rmse, label="Loss")
  plt.legend()
  plt.ylim([rmse.min()*0.97, rmse.max()])
  plt.show()  

print("Defined the plot_the_model and plot_the_loss_curve functions.")

"""Our Hypothesis:
1. Median_house_value have corelation with median_income.
2. Population with total rooms
3. households with total_rooms
"""

# Testing Corelation between median_house_value and median income.

# Selecting label and feature
my_feature = "median_house_value"
my_label="median_income" 

# Assign values to these three hyperparameters.
learning_rate = 0.0001
epochs = 50
batch_size =  30

# Don't change anything below this line.
my_model = build_model(learning_rate)
weight, bias, epochs, rmse = train_model(my_model, training_df,
                                         my_feature, my_label,
                                         epochs, batch_size)

plot_the_model(weight, bias, my_feature, my_label,500)
plot_the_loss_curve(epochs, rmse)

# Testing Corelation between Population and total rooms .

# Selecting label and feature
my_feature = "population"
my_label="total_bedrooms" 

# Assign values to these three hyperparameters.
learning_rate = 0.0001
epochs = 50
batch_size =  30

# Don't change anything below this line.
my_model = build_model(learning_rate)
weight, bias, epochs, rmse = train_model(my_model, training_df,
                                         my_feature, my_label,
                                         epochs, batch_size)

plot_the_model(weight, bias, my_feature, my_label,5000)
plot_the_loss_curve(epochs, rmse)

# Testing Corelation between households and total_rooms.

# Selecting label and feature
my_feature = "households"
my_label="total_rooms" 

# Assign values to these three hyperparameters.
learning_rate = 0.01
epochs = 50
batch_size =  30

# Don't change anything below this line.
my_model = build_model(learning_rate)
weight, bias, epochs, rmse = train_model(my_model, training_df,
                                         my_feature, my_label,
                                         epochs, batch_size)

plot_the_model(weight, bias, my_feature, my_label,2000)
plot_the_loss_curve(epochs, rmse)

"""Conclution:
Median_house_value have corelation with median_income is true.
Population with total rooms is true
households with total_rooms is true
"""